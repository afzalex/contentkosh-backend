// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  SUPERADMIN
  GUEST
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  businessUsers BusinessUser[]
  batchUsers    BatchUser[]

  @@map("users")
}

model Business {
  id            Int      @id @default(autoincrement())
  instituteName String   @map("institute_name")
  logo          String?  // URL or file path to logo
  tagline       String?
  contactNumber String?  @map("contact_number")
  email         String?
  address       String?
  youtubeUrl    String?  @map("youtube_url")
  instagramUrl  String?  @map("instagram_url")
  linkedinUrl   String?  @map("linkedin_url")
  facebookUrl   String?  @map("facebook_url")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  exams         Exam[]
  businessUsers BusinessUser[]
  announcements Announcement[]
  batches       Batch[]

  @@map("business")
}

model BusinessUser {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  businessId Int     @map("business_id")
  role      UserRole
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
  @@map("business_users")
}

model Batch {
  id          Int      @id @default(autoincrement())
  codeName    String   @unique @map("code_name")
  displayName String   @map("display_name")
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  isActive    Boolean  @default(true) @map("is_active")
  businessId  Int      @map("business_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  batchUsers BatchUser[]

  @@map("batches")
}

model BatchUser {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  batchId   Int      @map("batch_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  batch Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@unique([userId, batchId])
  @@map("batch_users")
}

model Announcement {
  id          Int      @id @default(autoincrement())
  heading     String
  content     String
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  isActive    Boolean  @default(true) @map("is_active")
  businessId  Int      @map("business_id")
  visibleToAdmins    Boolean @default(false) @map("visible_to_admins")
  visibleToTeachers  Boolean @default(false) @map("visible_to_teachers")
  visibleToStudents  Boolean @default(false) @map("visible_to_students")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model Exam {
  id          Int      @id @default(autoincrement())
  name        String   // e.g., "UPSC", "NEET"
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  businessId  Int      @map("business_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  courses  Course[]

  @@map("exams")
}

model Course {
  id          Int      @id @default(autoincrement())
  name        String   // e.g., "Civil Services Course", "Medical Entrance Course"
  description String?
  duration    String?  // e.g., "6 months", "1 year"
  isActive    Boolean  @default(true) @map("is_active")
  examId      Int      @map("exam_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  exam     Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  subjects Subject[]

  @@map("courses")
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String   // e.g., "Geography", "History", "Physics"
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  courseId    Int      @map("course_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("subjects")
}
